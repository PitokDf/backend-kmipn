// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleUser {
  participant
  admin
}

model User {
  id         String      @id @default(cuid())
  email      String      @unique @db.VarChar(125)
  password   String      @db.VarChar(255)
  name       String      @db.VarChar(255)
  role       RoleUser    @default(participant)
  createdAt  DateTime    @default(now())
  userToken  UserToken?
  teamMember TeamMember?
}

model UserToken {
  id        Int      @id @default(autoincrement())
  token     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Team {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(125)
  category    String       @db.VarChar(50)
  institution String
  createdAt   DateTime     @default(now())
  teamMembers TeamMember[]
  proposal    Proposal[]
  submission  Submission[]
}

enum RoleTeamMember {
  leader
  member
}

model TeamMember {
  id        Int            @id @default(autoincrement())
  teamId    Int
  team      Team           @relation(fields: [id], references: [id])
  userId    String         @unique
  user      User           @relation(fields: [userId], references: [id])
  role      RoleTeamMember
  createdAt DateTime       @default(now())
}

enum statusProposal {
  uploaded
  pending
  verified
}

model Proposal {
  id        Int            @id @default(autoincrement())
  teamId    Int            @unique
  team      Team           @relation(fields: [teamId], references: [id])
  fileLink  String?
  status    statusProposal
  createdAt DateTime       @default(now())
}

enum Round {
  preliminary
  final
}

enum statusSubmission {
  pending
  passed
  failed
}

model Submission {
  id        Int              @id @default(autoincrement())
  teamId    Int
  team      Team             @relation(fields: [teamId], references: [id])
  round     Round
  status    statusSubmission @default(pending)
  createdAt DateTime         @default(now())
}
